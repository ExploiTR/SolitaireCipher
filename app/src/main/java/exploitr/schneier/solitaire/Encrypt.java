package exploitr.schneier.solitaire;

/*Copyright 2018 Pratim Majumder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

import android.content.BroadcastReceiver;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.Context;
import android.content.DialogInterface;
import android.os.Bundle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.InputType;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Patterns;
import android.util.TypedValue;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionButton;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionHelper;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionLayout;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RFACLabelItem;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RapidFloatingActionContentLabelList;

import java.util.ArrayList;
import java.util.List;

import exploitr.schneier.SMSBox.SMS;
import exploitr.schneier.utils.Numpy;

public class Encrypt extends AppCompatActivity implements RapidFloatingActionContentLabelList.OnRapidFloatingActionContentLabelListListener {

    private EditText plainMain;
    private EditText keyMain;
    private TextView cipher;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_encrypt);

        Toolbar toolbar = findViewById(R.id.toolbar_enc);
        setSupportActionBar(toolbar);

        toolbar.setTitle("Encrypt");
        toolbar.setSubtitle("Encrypt-Copy-Send");

        plainMain = findViewById(R.id.plainMain);
        keyMain = findViewById(R.id.keyMain);
        cipher = findViewById(R.id.cipher);

        RapidFloatingActionLayout rfaLayout = findViewById(R.id.activity_main_rfal);
        RapidFloatingActionButton rfaBtn = findViewById(R.id.activity_main_rfab);

        RapidFloatingActionContentLabelList rfaContent = new RapidFloatingActionContentLabelList(Encrypt.this);
        rfaContent.setOnRapidFloatingActionContentLabelListListener(this);
        List<RFACLabelItem> items = new ArrayList<>();
        items.add(new RFACLabelItem<Integer>()
                .setLabel("Send Message CipherText")
                .setResId(R.drawable.ic_message)
                .setIconNormalColor(0xff19b70b)
                .setIconPressedColor(0xff138808)
                .setLabelColor(0xff19b70b)
                .setWrapper(2)
        );
        items.add(new RFACLabelItem<Integer>()
                .setLabel("Copy CipherText To Clipboard")
                .setResId(R.drawable.ic_content_copy)
                .setIconNormalColor(0xff0066FF)
                .setIconPressedColor(0xff0047b1)
                .setLabelColor(0xff277eff)
                .setWrapper(0)
        );
        rfaContent.setItems(items)
                .setIconShadowRadius(5)
                .setIconShadowColor(0xff888888)
                .setIconShadowDy(5)
        ;
        new RapidFloatingActionHelper(
                Encrypt.this,
                rfaLayout,
                rfaBtn,
                rfaContent
        ).build();

        plainMain.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                cipher.setText("");
                if (!(TextUtils.isEmpty(s) | TextUtils.isEmpty(keyMain.getText()))) {
                    cipher.setText(Numpy
                            .getNumpy()
                            .getCipherText(
                                    s.toString(),
                                    keyMain.getText().toString()));
                }
            }
        });

        keyMain.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                cipher.setText("");
                if (!(TextUtils.isEmpty(s) | TextUtils.isEmpty(plainMain.getText()))) {
                    cipher.setText(Numpy
                            .getNumpy()
                            .getCipherText(
                                    plainMain.getText().toString(), s.toString()));
                }
            }
        });

    }

    @Override
    public void onRFACItemLabelClick(int position, RFACLabelItem item) {
        if (position == 0) {
            Toast.makeText(this, "Direct Message Cipher Content", Toast.LENGTH_SHORT).show();
        } else if (position == 1) {
            Toast.makeText(this, "Copy to clipboard and paste anywhere", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public void onRFACItemIconClick(int position, RFACLabelItem item) {
        if (!TextUtils.isEmpty(cipher.getText())) {
            if (position == 0) {
                final EditText editText = new EditText(Encrypt.this);
                final Spinner spinner = new Spinner(Encrypt.this);
                editText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_CLASS_PHONE);
                editText.setHint("+9199######69");

                LinearLayout layout = new LinearLayout(Encrypt.this);
                layout.setOrientation(LinearLayout.VERTICAL);
                layout.setPadding(20, 10, 20, 10);
                layout.addView(editText);

                if (SMS.ready().isMultiMode(Encrypt.this)) {

                    TextView view = new TextView(Encrypt.this, null, R.style.TextAppearance_AppCompat_Button);
                    view.setTextSize(TypedValue.COMPLEX_UNIT_SP, 17);
                    view.setText(R.string.choose_sim_slot);
                    layout.addView(view);

                    spinner.setAdapter(new ArrayAdapter<>(Encrypt.this,
                            android.R.layout.simple_spinner_dropdown_item, new Integer[]{1, 2}));
                    layout.addView(spinner);
                }

                new AlertDialog.Builder(Encrypt.this)
                        .setTitle("Send Cipher")
                        .setView(layout)
                        .setNegativeButton("Cancel", null)
                        .setPositiveButton("Send", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                if (Patterns.PHONE.matcher(editText.getText()).matches()) {
                                    if (SMS.ready().isMultiMode(Encrypt.this)) {
                                        SMS.ready(editText.getText().toString(),
                                                cipher.getText().toString()
                                        ).send(Encrypt.this, spinner.getSelectedItemPosition());
                                    } else {
                                        SMS.ready(editText.getText().toString(),
                                                cipher.getText().toString()
                                        ).send(Encrypt.this);
                                    }
                                }
                            }
                        }).show();
            } else if (position == 1) {
                ClipboardManager clipboard = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);
                ClipData clip = ClipData.newPlainText("cipher_solitaire", cipher.getText());
                if (clipboard != null) {
                    clipboard.setPrimaryClip(clip);
                    Toast.makeText(this, "Copied!", Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(this, "Error Accessing ClipboardManager", Toast.LENGTH_SHORT).show();
                }
            }
        } else {
            Toast.makeText(this, "Cipher text is empty", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public void onBackPressed() {
        finish();
        super.onBackPressed();
    }
}
