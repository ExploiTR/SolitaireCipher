package exploitr.schneier.utils;

/*Copyright 2018 Pratim Majumder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

public class Numpy {

    private static Numpy i;

    private Numpy() {
    }

    public static Numpy getNumpy() {
        if (i == null) {
            i = new Numpy();
            return i;
        } else {
            return i;
        }
    }

    private int getNumber(String charOne) {
        charOne = charOne.toUpperCase();
        switch (charOne) {
            case "A":
                return 1;
            case "B":
                return 2;
            case "C":
                return 3;
            case "D":
                return 4;
            case "E":
                return 5;
            case "F":
                return 6;
            case "G":
                return 7;
            case "H":
                return 8;
            case "I":
                return 9;
            case "J":
                return 10;
            case "K":
                return 11;
            case "L":
                return 12;
            case "M":
                return 13;
            case "N":
                return 14;
            case "O":
                return 15;
            case "P":
                return 16;
            case "Q":
                return 17;
            case "R":
                return 18;
            case "S":
                return 19;
            case "T":
                return 20;
            case "U":
                return 21;
            case "V":
                return 22;
            case "W":
                return 23;
            case "X":
                return 24;
            case "Y":
                return 25;
            case "Z":
                return 26;
            default:
                return 0;
        }
    }

    private String getString(int numOne) {
        switch (numOne) {
            case 1:
                return "A";
            case 2:
                return "B";
            case 3:
                return "C";
            case 4:
                return "D";
            case 5:
                return "E";
            case 6:
                return "F";
            case 7:
                return "G";
            case 8:
                return "H";
            case 9:
                return "I";
            case 10:
                return "J";
            case 11:
                return "K";
            case 12:
                return "L";
            case 13:
                return "M";
            case 14:
                return "N";
            case 15:
                return "O";
            case 16:
                return "P";
            case 17:
                return "Q";
            case 18:
                return "R";
            case 19:
                return "S";
            case 20:
                return "T";
            case 21:
                return "U";
            case 22:
                return "V";
            case 23:
                return "W";
            case 24:
                return "X";
            case 25:
                return "Y";
            case 26:
                return "Z";
            default:
                return " ";
        }
    }

    private int getEncSpecialNumber(int num1, int num2) {
        if (num1 + num2 > 26) {
            return (num1 + num2) - 26;
        } else {
            return num1 + num2;
        }
    }

    private int getDesSpecialNumber(int num1, int num2) {
        if (num1 == num2 || num1 < num2) {
            return (num1 + 26) - num2;
        } else {
            return num1 - num2;
        }
    }

    private String[] checkBrokenKey(String[] brokenPlain, String[] brokenKey) {
        if (brokenKey.length < brokenPlain.length) {
            StringBuilder builder = new StringBuilder();
            for (String aBrokenKey : brokenKey) {
                builder.append(aBrokenKey);
            }
            for (int i = 0; i < (brokenPlain.length - brokenKey.length); i++) {
                builder.append(brokenKey[brokenKey.length - 1]);
            }
            return builder.toString().split("(?!^)");
        } else if (brokenKey.length > brokenPlain.length) {
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < brokenPlain.length; i++) {
                builder.append(brokenKey[i]);
            }
            return builder.toString().split("(?!^)");
        }
        return brokenKey;
    }

    public String getCipherText(String plain, String key) {
        plain = plain.replaceAll("[^a-zA-Z]", "").toUpperCase();
        key = key.replaceAll("[^a-zA-Z]", "").toUpperCase();

        String[] brokenPlain = plain.split("(?!^)");
        String[] brokenKey = key.split("(?!^)");

        brokenKey = checkBrokenKey(brokenPlain, brokenKey);

        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < brokenPlain.length; i++) {
            builder.append(getString(getEncSpecialNumber(getNumber(brokenPlain[i]), getNumber(brokenKey[i]))));
        }
        return builder.toString();
    }


    public String getSimpleText(String cipher, String key) {
        cipher = cipher.replaceAll("[^a-zA-Z]", "").toUpperCase();
        key = key.replaceAll("[^a-zA-Z]", "").toUpperCase();

        String[] brokenCipher = cipher.split("(?!^)");
        String[] brokenKey = key.split("(?!^)");

        brokenKey = checkBrokenKey(brokenCipher, brokenKey);

        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < brokenCipher.length; i++) {
            builder.append(getString(getDesSpecialNumber(getNumber(brokenCipher[i]), getNumber(brokenKey[i]))));
        }
        return builder.toString();
    }
}
